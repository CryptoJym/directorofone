// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for directors/managers
model User {
  id             String          @id @default(cuid())
  email          String          @unique
  name           String
  password       String?         // Optional for OAuth users
  company        String?
  department     String?
  role           UserRole        @default(DIRECTOR)
  isActive       Boolean         @default(true)
  onboardingCompleted Boolean    @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  // Relations
  consultations  Consultation[]
  workflows      Workflow[]
  tasks          Task[]
  analytics      Analytics[]
  notifications  Notification[]
  departments    Department[]
}

// Consultation/booking requests
model Consultation {
  id            String   @id @default(cuid())
  bookingId     String   @unique
  userId        String?
  name          String
  email         String
  company       String?
  department    String?
  challenges    String   @db.Text
  status        ConsultationStatus @default(PENDING)
  scheduledDate DateTime?
  notes         String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user          User?    @relation(fields: [userId], references: [id])
}

// Workflow automation templates
model Workflow {
  id            String   @id @default(cuid())
  userId        String
  name          String
  description   String
  type          WorkflowType
  trigger       Json     // Stores trigger configuration
  actions       Json     // Stores action configuration
  frequency     String   // daily, weekly, monthly, real-time, on-trigger
  isActive      Boolean  @default(true)
  lastRunAt     DateTime?
  nextRunAt     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user          User     @relation(fields: [userId], references: [id])
  executions    WorkflowExecution[]
  tasks         Task[]
}

// Workflow execution history
model WorkflowExecution {
  id            String   @id @default(cuid())
  workflowId    String
  status        ExecutionStatus
  startedAt     DateTime @default(now())
  completedAt   DateTime?
  result        Json?
  error         String?
  
  // Relations
  workflow      Workflow @relation(fields: [workflowId], references: [id])
}

// Tasks managed by workflows
model Task {
  id            String   @id @default(cuid())
  userId        String
  workflowId    String?
  title         String
  description   String?  @db.Text
  priority      Priority @default(MEDIUM)
  status        TaskStatus @default(TODO)
  dueDate       DateTime?
  completedAt   DateTime?
  tags          String[]
  metadata      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user          User     @relation(fields: [userId], references: [id])
  workflow      Workflow? @relation(fields: [workflowId], references: [id])
}

// Department information
model Department {
  id            String   @id @default(cuid())
  userId        String
  name          String
  size          Int      @default(1)
  budget        Float?
  objectives    String[] 
  metrics       Json?    // Key performance indicators
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user          User     @relation(fields: [userId], references: [id])
}

// Analytics and metrics
model Analytics {
  id            String   @id @default(cuid())
  userId        String
  date          DateTime @default(now())
  timeSaved     Float    // Hours saved
  tasksAutomated Int
  efficiencyScore Float
  activeWorkflows Int
  metadata      Json?
  
  // Relations
  user          User     @relation(fields: [userId], references: [id])
  
  @@index([userId, date])
}

// Notifications
model Notification {
  id            String   @id @default(cuid())
  userId        String
  type          NotificationType
  title         String
  message       String   @db.Text
  isRead        Boolean  @default(false)
  priority      Priority @default(MEDIUM)
  actionUrl     String?
  metadata      Json?
  createdAt     DateTime @default(now())
  
  // Relations
  user          User     @relation(fields: [userId], references: [id])
}

// Enums
enum UserRole {
  ADMIN
  DIRECTOR
  MANAGER
  USER
}

enum ConsultationStatus {
  PENDING
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum WorkflowType {
  REPORTING
  TASK_AUTOMATION
  NOTIFICATION
  DATA_SYNC
  APPROVAL
  SCHEDULING
}

enum ExecutionStatus {
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
  TASK_DUE
  WORKFLOW_COMPLETE
  BUDGET_ALERT
}
